#              if (is.na(bbox$maxx) || bbox$maxx < x@Polygons[[i]]@coords[j,1]) bbox$maxx <- x@Polygons[[i]]@coords[j,1]
#              if (is.na(bbox$maxy) || bbox$maxy < x@Polygons[[i]]@coords[j,2]) bbox$maxy <- x@Polygons[[i]]@coords[j,2]
#              print(bbox$minx)
#          }
}
bbox
}
test()
test <- function() {
## libraries needed
library(raster)
library(spatstat)
library(rgeos)
## you can choose your own country here
#bel <- getData('alt', country='MEX', mask=TRUE) ## SRTM 90m height data
belshp <- getData('GADM', country='CAN', level=1) ## administrative boundaries
print(head(belshp))
L <- length(unique(belshp$NAME_1))
print(belshp@bbox)
for (i in 1:L) {
print(belshp$NAME_1[i])
print(findExtents(belshp@polygons[[i]]))
}
## create random points
#dran <- runifpoint(500, win = as.vector(extent(bel)))
## make the random point spatial points
#S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
#                   proj4string = CRS(proj4string(belshp)))
## select only the once within belgium
#Sint <- gIntersection(S, belshp)
## create a map
#plot(bel)
#plot(belshp, add=TRUE)
#plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
}
findExtents <- function(x) {
# minx, maxx, miny, maxy
bbox <- data.frame(minx=NA, maxx=NA, miny=NA, maxy=NA)
L <- length(x@Polygons)
for (i in 1:L) {
if (is.na(bbox$minx) || bbox$minx > min(x@Polygons[[i]]@coords[,1])) bbox$minx <- min(x@Polygons[[i]]@coords[,1])
if (is.na(bbox$miny) || bbox$miny > min(x@Polygons[[i]]@coords[,2])) bbox$miny <- min(x@Polygons[[i]]@coords[,2])
if (is.na(bbox$maxx) || bbox$maxx < max(x@Polygons[[i]]@coords[,1])) bbox$maxx <- max(x@Polygons[[i]]@coords[,1])
if (is.na(bbox$maxy) || bbox$maxy < max(x@Polygons[[i]]@coords[,2])) bbox$maxy <- max(x@Polygons[[i]]@coords[,2])
}
bbox
}
test()
test <- function() {
## libraries needed
library(raster)
library(spatstat)
library(rgeos)
## you can choose your own country here
#bel <- getData('alt', country='MEX', mask=TRUE) ## SRTM 90m height data
belshp <- getData('GADM', country='USA', level=1) ## administrative boundaries
print(head(belshp))
L <- length(unique(belshp$NAME_1))
print(belshp@bbox)
for (i in 1:L) {
print(belshp$NAME_1[i])
print(findExtents(belshp@polygons[[i]]))
}
## create random points
#dran <- runifpoint(500, win = as.vector(extent(bel)))
## make the random point spatial points
#S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
#                   proj4string = CRS(proj4string(belshp)))
## select only the once within belgium
#Sint <- gIntersection(S, belshp)
## create a map
#plot(bel)
#plot(belshp, add=TRUE)
#plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
}
findExtents <- function(x) {
# minx, maxx, miny, maxy
bbox <- data.frame(minx=NA, maxx=NA, miny=NA, maxy=NA)
L <- length(x@Polygons)
for (i in 1:L) {
if (is.na(bbox$minx) || bbox$minx > min(x@Polygons[[i]]@coords[,1])) bbox$minx <- min(x@Polygons[[i]]@coords[,1])
if (is.na(bbox$miny) || bbox$miny > min(x@Polygons[[i]]@coords[,2])) bbox$miny <- min(x@Polygons[[i]]@coords[,2])
if (is.na(bbox$maxx) || bbox$maxx < max(x@Polygons[[i]]@coords[,1])) bbox$maxx <- max(x@Polygons[[i]]@coords[,1])
if (is.na(bbox$maxy) || bbox$maxy < max(x@Polygons[[i]]@coords[,2])) bbox$maxy <- max(x@Polygons[[i]]@coords[,2])
}
bbox
}
test()
getData('ISO3')
test <- function() {
## libraries needed
library(raster)
library(spatstat)
library(rgeos)
## you can choose your own country here
#bel <- getData('alt', country='MEX', mask=TRUE) ## SRTM 90m height data
belshp <- getData('GADM', country='SRB', level=1) ## administrative boundaries
print(head(belshp))
L <- length(unique(belshp$NAME_1))
print(belshp@bbox)
for (i in 1:L) {
print(belshp$NAME_1[i])
print(findExtents(belshp@polygons[[i]]))
}
## create random points
#dran <- runifpoint(500, win = as.vector(extent(bel)))
## make the random point spatial points
#S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
#                   proj4string = CRS(proj4string(belshp)))
## select only the once within belgium
#Sint <- gIntersection(S, belshp)
## create a map
#plot(bel)
#plot(belshp, add=TRUE)
#plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
}
findExtents <- function(x) {
# minx, maxx, miny, maxy
bbox <- data.frame(minx=NA, maxx=NA, miny=NA, maxy=NA)
L <- length(x@Polygons)
for (i in 1:L) {
if (is.na(bbox$minx) || bbox$minx > min(x@Polygons[[i]]@coords[,1])) bbox$minx <- min(x@Polygons[[i]]@coords[,1])
if (is.na(bbox$miny) || bbox$miny > min(x@Polygons[[i]]@coords[,2])) bbox$miny <- min(x@Polygons[[i]]@coords[,2])
if (is.na(bbox$maxx) || bbox$maxx < max(x@Polygons[[i]]@coords[,1])) bbox$maxx <- max(x@Polygons[[i]]@coords[,1])
if (is.na(bbox$maxy) || bbox$maxy < max(x@Polygons[[i]]@coords[,2])) bbox$maxy <- max(x@Polygons[[i]]@coords[,2])
}
bbox
}
getData('ISO3')
test()
colorbarGen <- function(A, B, n) {
f <- 0
for(i in 1:n) {
print(c(i,f))
f <- f + 1/n
}
}
colorbarGen(0,0,5)
colorbarGen <- function(A, B, n) {
f <- 0
for(i in 1:n+1) {
print(c(i,f))
f <- f + 1/(n+1)
}
}
colorbarGen(0,0,5)
colorbarGen <- function(A, B, n) {
f <- 0
for(i in 1:n+1) {
print(c(i,f))
f <- f + 1/n
}
}
colorbarGen(0,0,5)
colorbarGen <- function(A, B, n) {
f <- 0
for(i in 1:n) {
print(c(i,f))
f <- f + 1/(n-1)
}
}
colorbarGen(0,0,5)
colorbarGen <- function(A, B, n) {
f <- 0
for(i in 1:n) {
r = A[1] + f * (B[1] - A[1])
g = A[2] + f * (B[2] - A[2])
b = A[3] + f * (B[3] - A[3])
print(c(r,g,b))
# increment interpolation factor
f <- f + 1/(n-1)
}
}
colorbarGen(c(78,179,211), c(217,241,247),16)
colorbarGen <- function(A, B, n) {
f <- 0
df <- NULL
for(i in 1:n) {
r = A[1] + f * (B[1] - A[1])
g = A[2] + f * (B[2] - A[2])
b = A[3] + f * (B[3] - A[3])
if(is.null(df)) {df$r <- r; df$g <- g; df$b <- b}
else {temp <- data.frame(r = r, g = g, b = b); df <- rbind(df, temp)}
# increment interpolation factor
f <- f + 1/(n-1)
}
print(df)
}
colorbarGen(c(78,179,211), c(217,241,247),16)
colorbarGen <- function(A, B, n) {
f <- 0
df <- NULL
for(i in 1:n) {
r = round(A[1] + f * (B[1] - A[1]),0)
g = round(A[2] + f * (B[2] - A[2]),0)
b = round(A[3] + f * (B[3] - A[3]),0)
if(is.null(df)) {df$r <- r; df$g <- g; df$b <- b}
else {temp <- data.frame(r = r, g = g, b = b); df <- rbind(df, temp)}
# increment interpolation factor
f <- f + 1/(n-1)
}
print(df)
}
colorbarGen(c(78,179,211), c(217,241,247),16)
colorbarGen(c(78,179,211), c(217,241,247),8)
colorbarGen <- function(A, B, n) {
f <- -1
df <- NULL
for(i in 1:n) {
r = round(A[1] + f * (B[1] - A[1]),0)
g = round(A[2] + f * (B[2] - A[2]),0)
b = round(A[3] + f * (B[3] - A[3]),0)
if(is.null(df)) {df$r <- r; df$g <- g; df$b <- b}
else {temp <- data.frame(r = r, g = g, b = b); df <- rbind(df, temp)}
# increment interpolation factor
f <- f + 2/(n-1)
}
print(df)
}
colorbarGen(c(78,179,211), c(217,241,247),8)
colorbarGen <- function(A, B, n) {
f <- 0
df <- NULL
for(i in 1:n) {
r = round(A[1] + f * (B[1] - A[1]),0)
g = round(A[2] + f * (B[2] - A[2]),0)
b = round(A[3] + f * (B[3] - A[3]),0)
if(is.null(df)) {df$r <- r; df$g <- g; df$b <- b}
else {temp <- data.frame(r = r, g = g, b = b); df <- rbind(df, temp)}
# increment interpolation factor
f <- f + 1/(n-1)
}
print(df)
}
colorbarGen(c(78,179,211), c(217,241,247),8)
colorbarGen(c(52,178,202), c(217,241,247),8)
colorbarGen(c(52,178,202), c(217,241,247),16)
colorbarGen(c(127,205,87), c(242,250,140),8)
colorbarGen(c(127,205,87), c(242,250,140),16)
colorbarGen(c(129,43,146), c(227,185,219),8)
colorbarGen(c(129,43,146), c(227,185,219),16)
colorbarGen(c(103,165,153), c(204,212,199),8)
colorbarGen(c(103,165,153), c(204,212,199),16)
colorbarGen(c(230,29,140), c(250,167,200),8)
colorbarGen(c(230,29,140), c(250,167,200),16)
colorbarGen(c(247,53,99), c(248,117,167),8)
colorbarGen(c(254,179,66), c(254,217,154),8)
colorbarGen(c(240,64,40), c(252,192,178),8)
colorbarGen(c(247,53,99), c(254,217,106),8)
colorbarGen(c(203,140,55), c(242,237,197),8)
# ####################################################################################################
# TITLE:    Colorbar generator
# AUTHOR:   Joshua Poirier
#           jpoirier@neosgeo.com
#           +1-303-953-7613
# COMPANY:  NEOS GeoSolutions
#
# PURPOSE:  To linearly interpolate n colors between given colors A and B
# pre:      A - vector of three integers ranging from 0-255 representing red, blue, and green respectively
#           B - vector of three integers ranging from 0-255 representing red, blue, and green respectively
#           n - number of colors the output colorbar should have
# post:     data frame of interpolated colors bounded by the given colors is printed to console
# ####################################################################################################
colorbarGen <- function(A, B, n) {
# initialize interpolation factor and colors data frame
f <- 0
df <- NULL
# loop through n colors
for(i in 1:n) {
# compute red, blue, and green values for interpolated color i
r = round(A[1] + f * (B[1] - A[1]),0)
g = round(A[2] + f * (B[2] - A[2]),0)
b = round(A[3] + f * (B[3] - A[3]),0)
# add color i to the data frame
if(is.null(df)) {df$r <- r; df$g <- g; df$b <- b}
else {temp <- data.frame(r = r, g = g, b = b); df <- rbind(df, temp)}
# increment interpolation factor
f <- f + 1/(n-1)
}
# print the data frame
print(df)
}
colorbarGen(c(127,198,78), c(242,250,140), 8)
# ####################################################################################################
# TITLE:    Colorbar generator
# AUTHOR:   Joshua Poirier
#           jpoirier@neosgeo.com
#           +1-303-953-7613
# COMPANY:  NEOS GeoSolutions
#
# PURPOSE:  To linearly interpolate n colors between given colors A and B
# pre:      A - vector of three integers ranging from 0-255 representing red, blue, and green respectively
#           B - vector of three integers ranging from 0-255 representing red, blue, and green respectively
#           n - number of colors the output colorbar should have
# post:     data frame of interpolated colors bounded by the given colors is printed to console
# ####################################################################################################
colorbarGen <- function(A, B, n) {
# initialize interpolation factor and colors data frame
f <- 0
df <- NULL
# loop through n colors
for(i in 1:n) {
# compute red, blue, and green values for interpolated color i
r = round(A[1] + f * (B[1] - A[1]),0)
g = round(A[2] + f * (B[2] - A[2]),0)
b = round(A[3] + f * (B[3] - A[3]),0)
# add color i to the data frame
if(is.null(df)) {df$r <- r; df$g <- g; df$b <- b}
else {temp <- data.frame(r = r, g = g, b = b); df <- rbind(df, temp)}
# increment interpolation factor
f <- f + 1/(n)
}
# print the data frame
print(df)
}
colorbarGen(c(127,198,78),c(242,250,140),8)
?mnist
install.packages("BMP")
install.packages('bmp')
?grid.raster
?read.bmp
library(bmp)
?read.bmp
install.packages(pixmap)
install.packages('pixmap')
?read
?read.csv
?read.table
install.packages("gridExtra")
?cor
?read.table
?kmeans
?read.table
?normalmixem
?normalmixEM
makeMap <- function(location) {
library(ggmap)
qmap(location)
}
makeMap("Philadelphia")
makeMap <- function(location, zoom) {
library(ggmap)
if (is.na(zoom)) {
qmap(location)
}
else qmap(location, zoom)
}
makeMap("Philadelphia", 8)
makeMap <- function(location, zoom) {
library(ggmap)
if (is.na(zoom)) {
qmap(location, maptype="hybrid")
}
else qmap(location, zoom, maptype="hybrid")
}
makeMap("Philadelphia", 8)
makeMap <- function(location, zoom, maptype) {
library(ggmap)
if (is.na(location)) location = 'New York'
if (is.na(zoom)) zoom = 8
if (is.na(maptype)) maptype = 'hybrid'
qmap(location, zoom, maptype)
}
makeMap("Philadelphia", 8)
makeMap <- function(location = 'New York',
zoom = 8,
maptype = 'hybrid') {
library(ggmap)
qmap(location, zoom, maptype)
}
makeMap("Philadelphia", 8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
qmap(location, zoom=zlevel, maptype=mtype)
}
makeMap("Philadelphia", 8)
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print zlevel
#qmap(location, zoom=zlevel, maptype=mtype)
}
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print(zlevel)
#qmap(location, zoom=zlevel, maptype=mtype)
}
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print zlevel
#qmap(location, zoom=zlevel, maptype=mtype)
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print(zlevel)
qmap(location, zoom=zlevel, maptype=mtype)
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print(zlevel)
qmap(location, zlevel, maptype=mtype)
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print(zlevel)
qmap(location, zlevel, mtype)
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
get_map(location)
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
plot(get_map(location))
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
print(get_map(location))
}
makeMap(location="Philadelphia", zlevel=8)
?ggmap
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
ggmap(location)
}
?ggmap
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
ggmap(get_map(location))
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
ggmap(get_map(location)) + xlab("latitude")
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='hybrid') {
library(ggmap)
ggmap(get_map(location, zlevel)) +
ylab('latitude') +
xlab('longitude')
}
makeMap(location="Philadelphia", zlevel=8)
makeMap <- function(location='New York',
zlevel=8,
mtype='road') {
library(ggmap)
ggmap(get_map(location, zlevel)) +
ylab('latitude') +
xlab('longitude')
}
makeMap(location="Philadelphia", zlevel=8, mtype='hybrid')
makeMap <- function(location='New York',
zlevel=8,
mtype='road') {
library(ggmap)
ggmap(get_map(location, zlevel, mtype)) +
ylab('latitude') +
xlab('longitude')
}
makeMap(location="Philadelphia", zlevel=8, mtype='hybrid')
makeMap <- function(location='New York',
zlevel=8,
mtype='road') {
library(ggmap)
ggmap(get_map(location, zlevel, maptype=mtype)) +
ylab('latitude') +
xlab('longitude')
}
makeMap(location="Philadelphia", zlevel=8, mtype='hybrid')
makeMap(location="Philadelphia", zlevel=8, mtype='road')
makeMap(location="Toms River", zlevel=8, mtype='road')
makeMap(location="Toms River", zlevel=7, mtype='road')
version
setwd("C:/Projects/igrf_app")
library(shiny)
runApp()
